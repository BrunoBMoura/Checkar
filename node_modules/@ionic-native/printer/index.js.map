{"version":3,"sources":["../../../src/@ionic-native/plugins/printer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,YAAA,EAAc,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAwCtF;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AASH;IAA6B,2BAAiB;IAA9C;;IAkDA,CAAC;gBAlDY,OAAO;IAElB;;;OAGG;IACH,6BAAW,GAAX;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE;aAChB,IAAI,CAAC,UAAC,GAAQ,IAAK,OAAA,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAA1B,CAA0B,CAAC,CAAC;IACpD,CAAC;IAED;;;OAGG;IAEH,uBAAK,GAAL;QACE,MAAM,CAAC,IAAI,OAAO,CAAM,UAAC,OAAiB;YACxC,SAAO,CAAC,SAAS,EAAE;iBAChB,KAAK,CAAC,UAAC,KAAc,EAAE,KAAU;gBAChC,OAAO,CAAC,EAAE,KAAK,OAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IAEH,sBAAI,GAAJ,cAAuB,MAAM,CAAC,CAAC,CAAC;IAEhC;;;;;OAKG;IAKH,uBAAK,GAAL,UAAM,OAA6B,EAAE,OAAsB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEjF,kBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,sBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAjCA;QADC,YAAY,EAAE;;;;wCAQd;IAOD;QADC,OAAO,EAAE;;;;uCACsB;IAYhC;QAJC,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;wCACoF;IA1C3E,OAAO;QARnB,MAAM,CAAC;YACN,UAAU,EAAE,SAAS;YACrB,MAAM,EAAE,oCAAoC;YAC5C,SAAS,EAAE,yBAAyB;YACpC,IAAI,EAAE,kDAAkD;YACxD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACzC,CAAC;OAEW,OAAO,CAkDnB;IAAD,cAAC;;CAlDD,AAkDC,CAlD4B,iBAAiB,GAkD7C;SAlDY,OAAO","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, CordovaCheck, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\nexport interface PrintOptions {\r\n  /**\r\n   * The name of the print job and the document\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * The network URL of the printer.\r\n   * Only supported on iOS.\r\n   */\r\n  printerId?: string;\r\n\r\n  /**\r\n   * Specifies the duplex mode to use for the print job.\r\n   * Either double-sided (duplex:true) or single-sided (duplex:false).\r\n   * Double-sided by default.\r\n   * Only supported on iOS\r\n   */\r\n  duplex?: boolean;\r\n\r\n  /**\r\n   * The orientation of the printed content, portrait or landscape\r\n   * Portrait by default.\r\n   */\r\n  landscape?: boolean;\r\n\r\n  /**\r\n   * If your application only prints black text, setting this property to true can result in better performance in many cases.\r\n   * False by default.\r\n   */\r\n  grayscale?: boolean;\r\n\r\n  /**\r\n   * The Size and position of the print view\r\n   */\r\n  bounds?: number[] | any;\r\n}\r\n\r\n/**\r\n * @name Printer\r\n * @description Prints documents or HTML rendered content\r\n * @usage\r\n * ```typescript\r\n * import { Printer, PrintOptions } from '@ionic-native/printer';\r\n *\r\n * constructor(private printer: Printer) { }\r\n *\r\n * ...\r\n *\r\n * this.printer.isAvailable().then(onSuccess, onError);\r\n *\r\n * let options: PrintOptions = {\r\n *      name: 'MyDocument',\r\n *      printerId: 'printer007',\r\n *      duplex: true,\r\n *      landscape: true,\r\n *      grayscale: true\r\n *    };\r\n *\r\n * this.printer.print(content, options).then(onSuccess, onError);\r\n * ```\r\n * @interfaces\r\n * PrintOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'Printer',\r\n  plugin: 'de.appplant.cordova.plugin.printer',\r\n  pluginRef: 'cordova.plugins.printer',\r\n  repo: 'https://github.com/katzer/cordova-plugin-printer',\r\n  platforms: ['Android', 'iOS', 'Windows']\r\n})\r\n\r\nexport class Printer extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Checks whether the device is capable of printing (uses `check()` internally)\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  isAvailable(): Promise<boolean> {\r\n    return this.check()\r\n      .then((res: any) => Promise.resolve(res.avail));\r\n  }\r\n\r\n  /**\r\n   * Checks if the printer service is available (iOS) or if printer services are installed and enabled (Android).\r\n   * @return {Promise<any>} returns a promise that resolve with an object indicating whether printing is available, and providing the number of printers available\r\n   */\r\n  @CordovaCheck()\r\n  check(): Promise<any> {\r\n    return new Promise<any>((resolve: Function) => {\r\n      Printer.getPlugin()\r\n        .check((avail: boolean, count: any) => {\r\n          resolve({ avail, count });\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Displays a system interface allowing the user to select an available printer. To speak with a printer directly you need to know the network address by picking them before via `printer.pick`.\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  pick(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Sends content to the printer.\r\n   * @param content {string | HTMLElement} The content to print. Can be a URL or an HTML string. If a HTML DOM Object is provided, its innerHtml property value will be used.\r\n   * @param options {PrintOptions} optional. The options to pass to the printer\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 2,\r\n    errorIndex: 4\r\n  })\r\n  print(content: string | HTMLElement, options?: PrintOptions): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}